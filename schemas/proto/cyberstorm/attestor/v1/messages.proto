syntax = "proto3";

package cyberstorm.attestor.v1;

option go_package = "github.com/cyberstorm-dev/attestor-schemas/gen/cyberstorm/attestor/v1";

import "google/protobuf/descriptor.proto";
import "eas/v1/messages.proto";

extend google.protobuf.MessageOptions {
  optional string openapi_title = 50001;
};


// Identity registry - links domain identifier to Ethereum address
message Identity {
  option (openapi_title) = "V1Identity";
  string domain = 1;              // Points to domain
  string identifier = 2;          // username on that domain
  string registrant = 3;          // Ethernet address of the registrant (who signs payload)
  string proof_url = 4;           // Verification proof URL (e.g., gist URL)
  string attestor = 5;            // Ethernet address of the attestor
  bytes registrant_signature = 6; // Registrant's signature of (domain.domain + identifier + registrant)
  bytes attestor_signature = 7;   // Attestor's signature of (domain.domain + identifier + registrant)
  eas.v1.Attestation eas_attestation = 8; // Optional: EAS attestation metadata when loaded from chain
}

// Repository for EAS attestation (stored on-chain)
message Repository {
  option (openapi_title) = "V1Repository";
  string domain = 1;
  string path = 2;                // The repository to monitor
  Identity registrant = 3;        // Identity of the registrant (GitHub user -> ETH address)
  string proof_url = 4;           // Verification branch name (e.g., "cyberstorm-verification-abcd1234")
  string attestor = 5;            // Ethereum address of the attestor
  bytes registrant_signature = 6; // Signature of (repository.domain.domain + repository.path) by registrant
  bytes attestor_signature = 7;   // Attestor's signature of (repository.domain.domain + repository.path + registrant)
  eas.v1.Attestation eas_attestation = 8; // Optional: EAS attestation metadata when loaded from chain
  // Note: webhook_secret derived as keccak256(domain + path + registrant_signature + attestor_address)
}

enum ContributionEventType {
  CONTRIBUTION_EVENT_TYPE_UNSPECIFIED = 0;
  // Issue-related events
  CONTRIBUTION_EVENT_TYPE_ISSUE_OPENED = 1;
  CONTRIBUTION_EVENT_TYPE_ISSUE_CLOSED = 2;
  // Pull request events
  CONTRIBUTION_EVENT_TYPE_PULL_REQUEST_OPENED = 3;
  CONTRIBUTION_EVENT_TYPE_PULL_REQUEST_CLOSED = 4;
  CONTRIBUTION_EVENT_TYPE_PULL_REQUEST_MERGED = 5;
  // Review events
  CONTRIBUTION_EVENT_TYPE_REVIEW_CHANGES_REQUESTED = 6;
  CONTRIBUTION_EVENT_TYPE_REVIEW_APPROVED = 7;
  // Release events
  CONTRIBUTION_EVENT_TYPE_RELEASE_RELEASED = 8;
  CONTRIBUTION_EVENT_TYPE_RELEASE_PUBLISHED = 9;
}

message Contribution {
  option (openapi_title) = "V1Contribution";
  Identity identity = 1;          // Points to identity
  Repository repository = 2;      // Points to repository
  ContributionEventType event_type = 3;
  repeated Contribution linked_contributions = 4;
  string url = 5;                 // Platform-specific URL to the contribution
  bytes identity_uid = 6;     // UID of the Identity attestation for composability
  bytes repository_uid = 7; // UID of the Repository attestation
  repeated bytes linked_contribution_uids = 8;
  eas.v1.Attestation eas_attestation = 9; // Optional: EAS attestation metadata when loaded from chain
}

// Webhook payload wrapper
message WebhookEvent {
  option (openapi_title) = "V1WebhookEvent";
  Repository repository = 1;       // Repository where event occurred
  ContributionEventType event_type = 2; // Type of GitHub webhook event
  string raw_payload = 3;         // Original GitHub JSON payload
}
